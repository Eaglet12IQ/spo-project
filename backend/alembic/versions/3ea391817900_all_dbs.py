"""all dbs

Revision ID: 3ea391817900
Revises: 
Create Date: 2025-05-05 10:55:56.204815

"""
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text
from app.core.security import get_password_hash  # Импортируем функцию хеширования


# revision identifiers, used by Alembic.
revision: str = '3ea391817900'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    
    # Добавляем базовые роли
    op.bulk_insert(
        sa.table('roles',
            sa.Column('id', sa.Integer),
            sa.Column('name', sa.String)
        ),
        [
            {'id': 1, 'name': 'admin'},
            {'id': 2, 'name': 'user'}
        ]
    )

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    
    # Добавляем тестового администратора
    admin_password = get_password_hash("admin123")  # Хешируем пароль
    op.bulk_insert(
        sa.table('users',
            sa.Column('id', sa.Integer),
            sa.Column('email', sa.String),
            sa.Column('username', sa.String),
            sa.Column('hashed_password', sa.String),
            sa.Column('role_id', sa.Integer)
        ),
        [
            {
                'id': 1,
                'email': 'admin@example.com',
                'username': 'admin',
                'hashed_password': admin_password,
                'role_id': 1  # ID роли admin
            }
        ]
    )

    op.create_table('collectors',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('avatar_url', sa.String(), server_default='/static/avatars/default.png', nullable=False),
    sa.Column('country', sa.String(length=50), server_default='Россия', nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('middle_name', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )

    op.create_table('collections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('collector_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.ForeignKeyConstraint(['collector_id'], ['collectors.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('stamps',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('serial_number', sa.String(length=50), nullable=False),
    sa.Column('country', sa.String(length=50), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('circulation', sa.Integer(), nullable=False),
    sa.Column('cost', sa.Integer(), nullable=False),
    sa.Column('perforation', sa.Integer(), nullable=False),
    sa.Column('topic', sa.String(length=100), nullable=False),
    sa.Column('features', sa.String(length=500), nullable=True),
    sa.Column('collection_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('collection_id'),
    sa.UniqueConstraint('serial_number')
    )
    op.create_index(op.f('ix_stamps_id'), 'stamps', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_stamps_id'), table_name='stamps')
    op.drop_table('stamps')
    op.drop_table('collections')
    
    # Удаляем тестового коллекционера
    op.execute("DELETE FROM collectors WHERE user_id = 1")
    op.drop_table('collectors')
    
    # Удаляем тестового администратора
    op.execute("DELETE FROM users WHERE id = 1")
    
    # Удаляем роли
    op.execute("DELETE FROM roles WHERE id IN (1, 2)")
    
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    # ### end Alembic commands ###